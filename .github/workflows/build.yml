# GitHub Actions 工作流名称
name: Build Kernel with SukiSU-Ultra

# 工作流触发条件：允许手动触发
on:
  workflow_dispatch:

# 定义工作流中的任务
jobs:
  build:
    # 任务名称
    name: Build Kernel for realme GT Neo6
    # 运行任务的虚拟机环境
    runs-on: ubuntu-latest

    # 任务执行的步骤
    steps:
      # 步骤1：检出当前仓库代码（如果需要访问仓库内的脚本文件）
      - name: Checkout Workflow Repo
        uses: actions/checkout@v4

      # 步骤2：安装编译所需的依赖包
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential cpio curl flex git kmod libssl-dev libelf-dev squashfs-tools zip patch python3-pip

      # 步骤3：克隆 Proton Clang 编译器工具链
      - name: Clone Compiler Toolchain
        run: |
          git clone --depth=1 https://github.com/kdrag0n/proton-clang.git clang-toolchain

      # 步骤4：设置编译环境变量
      - name: Set Environment Variables
        run: |
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "KBUILD_BUILD_USER=GitHubActions" >> $GITHUB_ENV
          echo "KBUILD_BUILD_HOST=CI" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "NM=llvm-nm" >> $GITHUB_ENV
          echo "OBJCOPY=llvm-objcopy" >> $GITHUB_ENV
          echo "OBJDUMP=llvm-objdump" >> $GITHUB_ENV
          echo "STRIP=llvm-strip" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/clang-toolchain/bin:$PATH" >> $GITHUB_ENV

      # 步骤5：检出内核源代码（使用 sukisu 分支）
      - name: Checkout Kernel Source (sukisu branch)
        uses: actions/checkout@v4
        with:
          repository: realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source
          ref: master
          path: kernel-source
          fetch-depth: 1

      # 步骤6：集成 SukiSU-Ultra (susfs)
      # 切换到内核源码目录并执行官方安装脚本
      - name: Integrate SukiSU-Ultra (susfs)
        working-directory: ./kernel-source
        run: |
          echo "✅ Integrating SukiSU-Ultra..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          echo "✅ Integration complete."

      # 步骤7：开始编译内核
      - name: Build Kernel
        working-directory: ./kernel-source
        run: |
          echo "✅ Starting kernel build..."
          # 配置内核：请将 'vendor/sm8650_defconfig' 替换为您设备实际的 defconfig 文件
          make O=out vendor/pineapple_GKI.config
          
          # 执行编译：使用所有可用的CPU核心
          make O=out -j$(nproc --all)
          echo "✅ Build finished."

      # 步骤8：打包编译产物
      - name: Package Artifacts
        run: |
          echo "📦 Packaging the kernel image..."
          cd kernel-source/out/arch/arm64/boot/
          # 将内核镜像文件打包成zip
          zip -r Kernel-realme_gtneo6-$(date +%Y%m%d).zip Image
          echo "📦 Packaging complete."

      # 步骤9：上传编译产物
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Image
          # 上传打包好的zip文件
          path: kernel-source/out/arch/arm64/boot/*.zip
