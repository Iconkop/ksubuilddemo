# =================================================================
# Final Verified YAML for Realme GT Neo 6 Kernel Build
# This version is confirmed to be syntactically correct.
# =================================================================
name: Build Kernel with SukiSU-Ultra (AK3)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          echo "Installing necessary build dependencies..."
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git cpio libncurses5-dev libssl-dev bc flex \
            bison libelf-dev rsync python3 zip

      - name: Download Toolchain and Sources
        run: |
          echo "Cloning AOSP Clang toolchain..."
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 clang-toolchain
          
          echo "Cloning Kernel source..."
          git clone --depth=1 https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source.git kernel
          
          echo "Cloning Vendor source..."
          mkdir -p kernel/vendor
          git clone --depth=1 https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-vendor-source.git kernel/vendor/realme

      - name: Configure and Integrate SukiSU-Ultra
        run: |
          cd kernel

          echo "Enabling KernelSU in the defconfig (required by setup script)..."
          echo "CONFIG_KSU=y" >> arch/arm64/configs/vendor/pineapple_GKI.config
          echo "Configuration updated:"
          tail -n 3 arch/arm64/configs/vendor/pineapple_GKI.config
          
          echo "Running SukiSU-Ultra setup script..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

      - name: Set Environment Variables
        id: set_env
        run: |
          echo "Setting up build environment variables..."
          CLANG_PATH=$GITHUB_WORKSPACE/clang-toolchain
          CLANG_VERSION_DIR=$(ls -d $CLANG_PATH/clang-r* | head -n 1)
          
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "PATH=$CLANG_VERSION_DIR/bin:$PATH" >> $GITHUB_ENV
          
          echo "ZIP_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT
          echo "Toolchain Path: $CLANG_VERSION_DIR"

      - name: Start Kernel Compilation
        run: |
          echo "Starting GKI kernel compilation..."
          cd kernel
          LTO=thin ./build/build.sh

      - name: Package with AnyKernel3
        id: zipper
        run: |
          echo "Cloning AnyKernel3 template..."
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
          
          echo "Copying compiled boot.img to AnyKernel3 directory..."
          COMPILED_BOOT_IMG=$GITHUB_WORKSPACE/kernel/out/android14-5.15/dist/boot.img
          if [ -f "$COMPILED_BOOT_IMG" ]; then
            cp "$COMPILED_BOOT_IMG" "$GITHUB_WORKSPACE/AnyKernel3/boot.img"
          else
            echo "Error: Compiled boot.img not found!"
            exit 1
          fi
          
          echo "Customizing AnyKernel3 script..."
          cd AnyKernel3
          sed -i 's/kernel.string=.*/kernel.string=Kernel for Realme GT Neo 6 by ${{ github.actor }}/g' anykernel.sh
          sed -i 's/device.name1=.*/device.name1=RMX3852/g' anykernel.sh
          sed -i 's/device.name2=.*/device.name2=pineapple/g' anykernel.sh
          sed -i 's/is_slot_device=.*/is_slot_device=1/g' anykernel.sh

          echo "Creating flashable zip package..."
          ZIP_NAME="AK3-SukiSU-GTNeo6-${{ steps.set_env.outputs.ZIP_DATE }}.zip"
          zip -r9 "../$ZIP_NAME" * -x ".git*" "LICENSE" "README.md"
          
          echo "ZIP_NAME_OUT=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Upload Flashable Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zipper.outputs.ZIP_NAME_OUT }}
          path: ${{ github.workspace }}/${{ steps.zipper.outputs.ZIP_NAME_OUT }}
