# =================================================================
# Final & Robust YAML for Realme GT Neo 6 Kernel Build
# Fixes "No such file or directory" error by using absolute paths and &&.
# =================================================================
name: Build Kernel with SukiSU-Ultra (AK3)

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Package Kernel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential git cpio libncurses5-dev libssl-dev bc flex \
            bison libelf-dev rsync python3 zip

      - name: Download Toolchain and Sources
        run: |
          git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 clang-toolchain
          git clone --depth=1 https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-kernel-source.git kernel
          mkdir -p kernel/vendor
          git clone --depth=1 https://github.com/realme-kernel-opensource/realme_gtneo6-AndroidV-vendor-source.git kernel/vendor/realme

      - name: Configure and Integrate SukiSU-Ultra
        # This step runs inside the kernel directory
        working-directory: ${{ github.workspace }}/kernel
        run: |
          echo "Enabling KernelSU in the defconfig..."
          echo "CONFIG_KSU=y" >> arch/arm64/configs/vendor/pineapple_GKI.config
          echo "Configuration updated:"
          tail -n 3 arch/arm64/configs/vendor/pineapple_GKI.config
          
          echo "Running SukiSU-Ultra setup script..."
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main

      - name: Set Environment Variables
        id: set_env
        run: |
          CLANG_PATH=$GITHUB_WORKSPACE/clang-toolchain
          CLANG_VERSION_DIR=$(ls -d $CLANG_PATH/clang-r* | head -n 1)
          
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "SUBARCH=arm64" >> $GITHUB_ENV
          echo "CLANG_TRIPLE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "PATH=$CLANG_VERSION_DIR/bin:$PATH" >> $GITHUB_ENV
          
          echo "ZIP_DATE=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

      - name: Start Kernel Compilation
        run: |
          echo "Workspace contents:"
          ls -l $GITHUB_WORKSPACE

          # Navigate into the kernel directory and execute the build.
          # Using "&&" ensures the build command only runs if "cd" is successful.
          cd $GITHUB_WORKSPACE/kernel && LTO=thin ./build/build.sh

      - name: Package with AnyKernel3
        id: zipper
        run: |
          # Use an absolute path for the compiled boot image for robustness
          COMPILED_BOOT_IMG=$GITHUB_WORKSPACE/kernel/out/android14-5.15/dist/boot.img
          
          echo "Looking for boot image at: $COMPILED_BOOT_IMG"
          if [ ! -f "$COMPILED_BOOT_IMG" ]; then
            echo "::error::Compiled boot.img not found!"
            # List the 'dist' directory contents for debugging
            echo "Listing contents of the 'dist' directory:"
            ls -lR $GITHUB_WORKSPACE/kernel/out/android14-5.15/dist
            exit 1
          fi
          
          echo "Cloning AnyKernel3 template..."
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git
          
          echo "Copying boot image and customizing AnyKernel3..."
          cp "$COMPILED_BOOT_IMG" "$GITHUB_WORKSPACE/AnyKernel3/boot.img"
          cd AnyKernel3
          sed -i 's/kernel.string=.*/kernel.string=Kernel for Realme GT Neo 6 by ${{ github.actor }}/g' anykernel.sh
          sed -i 's/device.name1=.*/device.name1=RMX3852/g' anykernel.sh
          sed -i 's/device.name2=.*/device.name2=pineapple/g' anykernel.sh
          sed -i 's/is_slot_device=.*/is_slot_device=1/g' anykernel.sh

          echo "Creating flashable zip package..."
          ZIP_NAME="AK3-SukiSU-GTNeo6-${{ steps.set_env.outputs.ZIP_DATE }}.zip"
          zip -r9 "../$ZIP_NAME" * -x ".git*" "LICENSE" "README.md"
          
          echo "ZIP_NAME_OUT=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Upload Flashable Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.zipper.outputs.ZIP_NAME_OUT }}
          path: ${{ github.workspace }}/${{ steps.zipper.outputs.ZIP_NAME_OUT }}
